import cntl from 'cntl'
import Layout from 'components/Layout'
import React, { useEffect, useState } from 'react'
import SEO from 'components/seo'
import Link from 'components/Link'
import Tooltip from 'components/Tooltip'
import Explorer from 'components/Explorer'
import ScrollArea from 'components/RadixUI/ScrollArea'
import { ComposableMap, Geographies, Geography, Marker, ZoomableGroup } from 'react-simple-maps'
import { ToggleGroup } from 'components/RadixUI/ToggleGroup'

const geoUrl = 'https://cdn.jsdelivr.net/npm/world-atlas@2/countries-110m.json'

type Event = {
    name: string
    location: { label: string; lat: number; lng: number }
    date: string
    format: string[]
    audience: string[]
    attendees: number
    speakers: string[]
    partners: string[]
    vibeScore: number
    link: string
    closed?: boolean
    // Enhanced properties for past events
    starRating?: number
    aiSummary?: string
    imageGallery?: string[]
    chaos?: string
    funFact?: string
    snackRating?: string
}

const eventsData: Event[] = [
    {
        name: 'AGI Builders Meetup with PostHog',
        location: { label: 'San Francisco, CA', lat: 37.7749, lng: -122.4194 },
        date: '2025-07-22',
        format: ['Talks', 'Fireside'],
        audience: ['SF AI Enthusiasts'],
        attendees: 112,
        speakers: ['Peter K', 'James'],
        partners: ['AGI Builders'],
        vibeScore: 5,
        link: 'https://github.com/PostHog/company-internal/issues/1999',
        starRating: 4.8,
        aiSummary:
            "An electrifying evening where 112 AI enthusiasts gathered to discuss the future of AGI. Peter K dropped some seriously hot takes about model interpretability while James casually mentioned he's teaching his toaster to write code. The energy was IMMACULATE.",
        imageGallery: ['agi-1.jpg', 'agi-2.jpg', 'agi-3.jpg'],
        chaos: 'Someone brought a robot arm that kept photobombing the speakers',
        funFact: "17 people claimed they were 'building the next ChatGPT'",
        snackRating: 'Pizza was mid but the AI-generated fortune cookies went HARD ðŸ”¥',
    },
    {
        name: 'AI Product Breakfast: AI Decisioning',
        location: { label: 'Austin, TX', lat: 30.2672, lng: -97.7431 },
        date: '2025-08-12',
        format: ['Breakfast', 'OST'],
        audience: ['AI Engineers'],
        attendees: 25,
        speakers: ['Haven'],
        partners: ['AITX'],
        vibeScore: 5,
        link: 'https://github.com/PostHog/meta/issues/334',
        starRating: 4.9,
        aiSummary:
            'Intimate breakfast gathering where Haven absolutely CRUSHED the AI decisioning talk. OST format led to some wild conversations about autonomous agents making life choices for us. Someone suggested an AI to decide what to have for breakfast at a breakfast event. Meta.',
        imageGallery: ['breakfast-1.jpg', 'breakfast-2.jpg'],
        chaos: 'The coffee machine broke and someone joked it was an AI uprising',
        funFact: "Haven's slides were actually generated by an AI that made decisions about what slides to show",
        snackRating: 'Texas-sized breakfast tacos. Absolutely legendary. 11/10',
    },
    {
        name: 'PostHog hardware hacknight',
        location: { label: 'Vermont, USA', lat: 44.5588, lng: -72.5778 },
        date: '2025-09-16',
        format: ['Meetup'],
        audience: ['Engineers', 'Founders'],
        attendees: 19,
        speakers: ['Danilo'],
        partners: [],
        vibeScore: 5,
        link: 'https://github.com/PostHog/meta/issues/322',
        starRating: 5.0,
        aiSummary:
            'Danilo hosted an absolutely UNHINGED hardware hacknight in Vermont. People built physical things with their bare hands. In 2025. Soldering irons were involved. Someone made a hedgehog-shaped robot that tracks analytics. Peak PostHog energy.',
        imageGallery: ['hardware-1.jpg', 'hardware-2.jpg', 'hardware-3.jpg'],
        chaos: 'Multiple smoke alarms triggered. Standard hardware hacknight behavior.',
        funFact: 'The hedgehog robot is now a permanent office fixture and has its own Slack channel',
        snackRating: "Artisanal Vermont cheese and maple everything. Chef's kiss.",
    },
    {
        name: 'MCP Builders Breakfast',
        location: { label: 'Amsterdam, NL', lat: 52.3676, lng: 4.9041 },
        date: '2025-09-25',
        format: ['Breakfast', 'OST'],
        audience: ['MCP practitioners'],
        attendees: 20,
        speakers: ['Jonathan'],
        partners: ['Fiberplane'],
        vibeScore: 5,
        link: 'https://github.com/PostHog/meta/issues/356',
        starRating: 4.7,
        aiSummary:
            'Jonathan brought the MCP heat to Amsterdam. 20 practitioners geeking out about protocols over Dutch breakfast. The OST format meant conversations went DEEP into technical weeds. Beautiful chaos.',
        imageGallery: ['mcp-1.jpg', 'mcp-2.jpg'],
        chaos: 'Someone tried to explain their MCP implementation using only bread and cheese',
        funFact: '3 people arrived on bikes. Very Amsterdam.',
        snackRating: 'Stroopwafels and hagelslag. Dutch breakfast supremacy confirmed.',
    },
    {
        name: "From Open Source to Scale: A Conversation with PostHog's Tim Glaser",
        location: { label: 'Dublin, IE', lat: 53.3498, lng: -6.2603 },
        date: '2025-09-26',
        format: ['Panel'],
        audience: ['Founders'],
        attendees: 55,
        speakers: ['Tim'],
        partners: [],
        vibeScore: 5,
        link: 'https://github.com/PostHog/meta/issues/371',
        starRating: 4.9,
        aiSummary:
            "Tim absolutely crushed it talking about PostHog's journey from scrappy open source project to CRUSHING IT at scale. 55 founders hanging on every word about fundraising, hiring, and why hedgehogs are the superior mascot choice.",
        imageGallery: ['dublin-1.jpg', 'dublin-2.jpg', 'dublin-3.jpg'],
        chaos: 'Someone asked if Tim would accept payment in Guinness',
        funFact: 'Tim revealed he codes in dark mode exclusively. Based.',
        snackRating: 'Irish whiskey and fancy cheese. Solid 9/10.',
    },
    {
        name: 'Paellas and Agents with PostHog',
        location: { label: 'Barcelona, ES', lat: 41.3851, lng: 2.1734 },
        date: '2025-09-28',
        format: ['Workshop'],
        audience: ['AI engineers'],
        attendees: 22,
        speakers: ['Georgiy'],
        partners: [],
        vibeScore: 5,
        link: 'https://github.com/PostHog/meta/issues/333',
        starRating: 4.6,
        aiSummary:
            'Georgiy ran a workshop on AI agents while we literally cooked paella together. Multi-tasking level: LEGENDARY. People were debugging agent hallucinations while stirring saffron rice. This is the future of tech events.',
        imageGallery: ['paella-1.jpg', 'paella-2.jpg'],
        chaos: "Someone's agent accidentally ordered 50kg of rice to the venue",
        funFact: "The paella was actually better than most Barcelona restaurants. Don't @ me.",
        snackRating: 'Fresh paella cooked on-site. Literally perfect. âˆž/10',
    },
    {
        name: 'Valio Con',
        location: { label: 'San Diego, CA', lat: 32.7157, lng: -117.1611 },
        date: '2025-09-14',
        format: ['Conf sponsorship'],
        audience: ['Designers'],
        attendees: 65,
        speakers: ['Cory'],
        partners: [],
        vibeScore: 4,
        link: 'https://github.com/PostHog/meta/issues/343',
        starRating: 4.3,
        aiSummary:
            "Cory represented PostHog at Valio Con, spreading the good word about product analytics to 65 designers. Lots of conversations about beautiful dashboards and why comic sans should be a valid font choice (it shouldn't).",
        imageGallery: ['valio-1.jpg', 'valio-2.jpg'],
        chaos: 'Design twitter beef erupted over button radius. Classic.',
        funFact: 'Someone designed a hedgehog logo redesign and it was... interesting',
        snackRating: 'Conference snacks. Standard fare. 6/10',
    },
    {
        name: 'PostHog Founders Lunch',
        location: { label: 'Cardiff, UK', lat: 51.4816, lng: -3.1791 },
        date: '2025-09-23',
        format: ['Lunch', 'OST'],
        audience: ['Founders'],
        attendees: 25,
        speakers: ['Adam'],
        partners: [],
        vibeScore: 4,
        link: 'https://github.com/PostHog/meta/issues/372',
        starRating: 4.5,
        aiSummary:
            "Adam hosted an intimate founders lunch in Cardiff. OST format meant deep conversations about fundraising, pivots, and whether it's ethical to name your company after an animal. Unanimous consensus: yes.",
        imageGallery: ['cardiff-1.jpg'],
        chaos: 'Someone pivoted their startup idea mid-lunch',
        funFact: 'Zero people knew Cardiff was in Wales before this event',
        snackRating: 'Welsh cakes and local lamb. Surprisingly fire. 8/10',
    },
    {
        name: '[Closed Event] James dinner with ODF founders',
        location: { label: 'San Francisco, CA', lat: 37.7749, lng: -122.4194 },
        date: '2025-09-24',
        format: ['Dinner'],
        audience: ['Founders'],
        attendees: 11,
        speakers: ['James'],
        partners: ['ODF'],
        vibeScore: 4,
        link: 'https://posthog.slack.com/archives/C08CG24E3SR/p1758828510754499',
        closed: true,
        starRating: 4.8,
        aiSummary:
            'Exclusive dinner where James and ODF founders discussed [REDACTED]. The vibes were immaculate. The conversation was [REDACTED]. Someone may or may not have [REDACTED].',
        imageGallery: ['redacted.jpg'],
        chaos: '[REDACTED]',
        funFact: "This event is so exclusive we can't tell you the fun fact",
        snackRating: "Michelin-level cuisine. We think. It's classified. ??/10",
    },
    {
        name: 'Jersey City Tech Meetup with PostHog',
        location: { label: 'Jersey City, NJ', lat: 40.7178, lng: -74.0431 },
        date: '2025-09-30',
        format: ['Talks', 'Panel', 'Networking'],
        audience: ['Product managers', 'Engineers'],
        attendees: 70,
        speakers: ['Abe'],
        partners: ['Apprenticeio'],
        vibeScore: 4,
        link: 'https://github.com/PostHog/meta/issues/339',
        starRating: 4.4,
        aiSummary:
            "Abe brought PostHog to Jersey City for talks, panels, and networking. 70 PMs and engineers talking about product development, analytics, and why Jersey gets a bad rap (it doesn't deserve it... mostly).",
        imageGallery: ['jersey-1.jpg', 'jersey-2.jpg'],
        chaos: "Heated debate about whether it's called 'pork roll' or 'taylor ham'",
        funFact: 'Best view of Manhattan skyline from any PostHog event to date',
        snackRating: 'Pizza and bagels. Jersey does food right. 9/10',
    },
    {
        name: 'MCP After Hours: AI Dev Tools Demo Night',
        location: { label: 'San Francisco, CA', lat: 37.7749, lng: -122.4194 },
        date: '2025-07-10',
        format: ['Talks'],
        audience: ['Founders', 'Engineers'],
        attendees: 85,
        speakers: ['Peter K'],
        partners: ['Speakeasy'],
        vibeScore: 3,
        link: 'https://github.com/PostHog/meta/issues/325',
        starRating: 4.1,
        aiSummary:
            'Peter K hosted demo night for AI dev tools. 85 people watching live demos of tools that may or may not ship. Classic startup energy. Someone demoed a tool that writes demos for demo nights. Peak meta.',
        imageGallery: ['demo-1.jpg', 'demo-2.jpg'],
        chaos: 'Three demos crashed during the actual demo',
        funFact: "Someone's 'AI pair programmer' suggested replacing their entire codebase with PHP",
        snackRating: 'Standard tech event pizza and beer. Mid. 5/10',
    },
    {
        name: 'Building With and For AI: Developer Tools for Modern Apps',
        location: { label: 'New York, NY', lat: 40.7128, lng: -74.006 },
        date: '2025-08-21',
        format: ['Talks', 'Networking'],
        audience: ['Engineers', 'Engineering managers'],
        attendees: 50,
        speakers: ['Abe'],
        partners: ['Vercel', 'Profound'],
        vibeScore: 3,
        link: 'https://github.com/PostHog/meta/issues/342',
        starRating: 4.2,
        aiSummary:
            "Abe teamed up with Vercel and Profound for a deep dive into AI dev tools. 50 engineers and managers discussing the bleeding edge of AI tooling. Someone asked when we'll have AI that writes the AI that writes the code. Soonâ„¢.",
        imageGallery: ['nyc-1.jpg'],
        chaos: 'Networking session turned into impromptu recruitment fair',
        funFact:
            'Someone was taking notes using an AI scribe that was running on a framework that was demoed at the event',
        snackRating: 'NYC bagels and coffee. Proper. 8/10',
    },
    {
        name: 'The Future of Developer Experience: Toronto Edition',
        location: { label: 'Toronto, ON', lat: 43.6532, lng: -79.3832 },
        date: '2025-08-26',
        format: ['Talks', 'Networking'],
        audience: ['Startup founders'],
        attendees: 75,
        speakers: ['Vincent'],
        partners: ['Deskree'],
        vibeScore: 3,
        link: 'https://github.com/PostHog/meta/issues/347',
        starRating: 4.0,
        aiSummary:
            "Vincent brought the DX conversation to Toronto. 75 founders debating what makes a good developer experience. Spoiler: it's good docs, fast builds, and tools that don't make you want to flip your desk.",
        imageGallery: ['toronto-1.jpg', 'toronto-2.jpg'],
        chaos: "Someone's laptop died during their talk about reliable infrastructure",
        funFact: 'Everyone apologized at least once. Very Canadian.',
        snackRating: 'Poutine and Tim Hortons. When in Rome. 7/10',
    },
    {
        name: 'Stealth Mode Mornings with PostHog',
        location: { label: 'New York, NY', lat: 40.7128, lng: -74.006 },
        date: '2025-07-24',
        format: ['Breakfast'],
        audience: ['Stealth founders'],
        attendees: 7,
        speakers: ['Mine'],
        partners: ['Starcycle', 'Cooley'],
        vibeScore: 2,
        link: 'https://github.com/PostHog/meta/issues/330',
        starRating: 3.8,
        aiSummary:
            "Intimate breakfast with 7 stealth founders. Everyone signed NDAs. We still don't know what anyone is building. Could be the next big thing. Could be another food delivery app. The mystery continues.",
        imageGallery: ['stealth-1.jpg'],
        chaos: 'Someone accidentally almost revealed their stealth startup and everyone gasped',
        funFact: 'This event was so stealth we almost forgot to have it',
        snackRating: 'Fancy breakfast but portions were TINY. 4/10',
    },
    {
        name: 'Pubquiz at Flutter & friends',
        location: { label: 'Stockholm, SE', lat: 59.3293, lng: 18.0686 },
        date: '2025-08-31',
        format: ['Pub quiz'],
        audience: ['Flutter engineers'],
        attendees: 50,
        speakers: ['Manoel'],
        partners: [],
        vibeScore: 2,
        link: 'https://github.com/PostHog/meta/issues/358',
        starRating: 3.9,
        aiSummary:
            "Manoel hosted a pub quiz at Flutter & friends conference. 50 Flutter engineers proving they're better at writing Dart than answering trivia. Lots of debate about whether Flutter counts as 'real' native development. (It does.)",
        imageGallery: ['pubquiz-1.jpg'],
        chaos: 'Quiz master asked a question about SwiftUI and got booed',
        funFact: "Winning team's name was 'Widget Tree Huggers'",
        snackRating: 'Swedish pub food and beer. Solid. 7/10',
    },
    {
        name: "MÃ¼nchen Hogtoberfest '25",
        location: { label: 'Munich, DE', lat: 48.1351, lng: 11.582 },
        date: '2025-09-24',
        format: ['Drinks'],
        audience: ['Founders', 'Engineers'],
        attendees: 7,
        speakers: [],
        partners: ['Speedinvest'],
        vibeScore: 2,
        link: 'https://github.com/PostHog/meta/issues/361',
        starRating: 4.2,
        aiSummary:
            'Small but mighty gathering in Munich. 7 people, infinite beer, and discussions about European startup ecosystems. Speedinvest brought the VC perspective. Everyone wore lederhosen. (Just kidding. Nobody wore lederhosen.)',
        imageGallery: ['munich-1.jpg'],
        chaos: 'Someone tried to expense their Oktoberfest outfit',
        funFact: 'Smallest PostHog event by attendance, highest beer-to-person ratio',
        snackRating: 'German pretzels and beer. Legendary. 10/10',
    },
]

function Events() {
    const [activeTab, setActiveTab] = useState<'past' | 'upcoming'>('past')
    const [selectedEvent, setSelectedEvent] = useState<Event | null>(null)
    const [hoveredEvent, setHoveredEvent] = useState<Event | null>(null)

    const today = new Date()
    const pastEvents = eventsData
        .filter((event) => new Date(event.date) < today)
        .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())

    const upcomingEvents = eventsData
        .filter((event) => new Date(event.date) >= today)
        .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime())

    const displayEvents = activeTab === 'past' ? pastEvents : upcomingEvents

    // Calculate center of all events for better initial positioning
    const calculateCenter = (events: Event[]) => {
        if (events.length === 0) return [0, 20]
        const avgLng = events.reduce((sum, e) => sum + e.location.lng, 0) / events.length
        const avgLat = events.reduce((sum, e) => sum + e.location.lat, 0) / events.length
        return [avgLng, avgLat]
    }

    const initialCenter = calculateCenter(displayEvents)
    const [position, setPosition] = useState({ coordinates: initialCenter, zoom: 1.2 })

    // Recenter map when switching tabs
    useEffect(() => {
        const center = calculateCenter(displayEvents)
        setPosition({ coordinates: center, zoom: 1.2 })
        setSelectedEvent(null)
    }, [activeTab])

    const handleEventClick = (event: Event) => {
        setSelectedEvent(event)
        setPosition({
            coordinates: [event.location.lng, event.location.lat],
            zoom: 4,
        })
    }

    const handleMoveEnd = (position: any) => {
        setPosition(position)
    }

    const handleZoomIn = () => {
        setPosition((prev) => ({
            ...prev,
            zoom: Math.min(prev.zoom * 1.5, 10),
        }))
    }

    const handleZoomOut = () => {
        setPosition((prev) => ({
            ...prev,
            zoom: Math.max(prev.zoom / 1.5, 0.8),
        }))
    }

    // Type assertion for react-simple-maps compatibility with React 19
    const Map = ComposableMap as any
    const ZoomGroup = ZoomableGroup as any
    const Geos = Geographies as any
    const Geo = Geography as any
    const MapMarker = Marker as any

    return (
        <Explorer template="generic" slug="events" title="Cool tech events" fullScreen>
            <div data-scheme="primary" className="flex flex-col @lg:flex-row text-primary h-full">
                <aside
                    data-scheme="secondary"
                    className="@lg:basis-80 bg-primary border-t @md:border-t-0 @md:border-r border-primary h-full flex flex-col"
                >
                    <div className="border-b border-primary px-4 pt-4 pb-4">
                        <ToggleGroup
                            title=""
                            hideTitle
                            options={[
                                { label: `Upcoming (${upcomingEvents.length})`, value: 'upcoming' },
                                { label: `Past (${pastEvents.length})`, value: 'past' },
                            ]}
                            onValueChange={(value) => setActiveTab(value as 'past' | 'upcoming')}
                            value={activeTab}
                        />
                    </div>

                    <ScrollArea className="flex-1">
                        <div className="p-4">
                            <div className="space-y-3">
                                {displayEvents.map((event, idx) => (
                                    <button
                                        data-scheme="primary"
                                        key={idx}
                                        onClick={() => handleEventClick(event)}
                                        className={cntl`
                      w-full text-left p-3 rounded border transition-all
                      ${selectedEvent?.name === event.name ? 'border-orange' : 'bg-primary border-primary'}
                    `}
                                    >
                                        <div className="font-semibold text-sm mb-1 line-clamp-2">{event.name}</div>
                                        <div className="text-xs text-muted space-y-1">
                                            <div>{event.location.label}</div>
                                            <div>
                                                {new Date(event.date).toLocaleDateString('en-US', {
                                                    month: 'short',
                                                    day: 'numeric',
                                                    year: 'numeric',
                                                })}
                                            </div>
                                            <div className="flex items-center gap-1">
                                                {Array.from({ length: event.vibeScore }).map((_, i) => (
                                                    <span key={i}>ðŸ”¥</span>
                                                ))}
                                            </div>
                                            {event.starRating && (
                                                <div className="flex items-center gap-1">
                                                    <span className="text-orange">â˜…</span>
                                                    <span>{event.starRating.toFixed(1)}</span>
                                                </div>
                                            )}
                                        </div>
                                    </button>
                                ))}
                            </div>
                        </div>
                    </ScrollArea>
                </aside>

                <div className="flex-1 relative h-full">
                    {selectedEvent && (
                        <div className="absolute left-4 top-4 bottom-4 w-96 rounded bg-primary border border-primary shadow-lg z-10 overflow-hidden flex flex-col">
                            <button
                                onClick={() => setSelectedEvent(null)}
                                className="absolute top-2 right-2 z-20 w-8 h-8 flex items-center justify-center rounded hover:bg-accent text-primary hover:text-primary text-xl leading-none"
                            >
                                âœ•
                            </button>

                            <ScrollArea className="flex-1">
                                <div className="p-4">
                                    <h2 className="text-xl font-bold mb-2">{selectedEvent.name}</h2>

                                    <div className="space-y-3 text-sm mb-4">
                                        <div>
                                            <div className="text-muted text-xs mb-1">Location</div>
                                            <div>{selectedEvent.location.label}</div>
                                        </div>

                                        <div>
                                            <div className="text-muted text-xs mb-1">Date</div>
                                            <div>
                                                {new Date(selectedEvent.date).toLocaleDateString('en-US', {
                                                    month: 'long',
                                                    day: 'numeric',
                                                    year: 'numeric',
                                                })}
                                            </div>
                                        </div>

                                        {selectedEvent.starRating && (
                                            <div>
                                                <div className="text-muted text-xs mb-1">Rating</div>
                                                <div className="flex items-center gap-2">
                                                    <span className="text-orange text-lg">â˜…</span>
                                                    <span className="text-lg font-semibold">
                                                        {selectedEvent.starRating.toFixed(1)}
                                                    </span>
                                                    <span className="text-muted">/ 5.0</span>
                                                </div>
                                            </div>
                                        )}

                                        <div>
                                            <div className="text-muted text-xs mb-1">Format</div>
                                            <div className="flex flex-wrap gap-1">
                                                {selectedEvent.format.map((f, i) => (
                                                    <span key={i} className="px-2 py-1 bg-accent rounded text-xs">
                                                        {f}
                                                    </span>
                                                ))}
                                            </div>
                                        </div>

                                        <div>
                                            <div className="text-muted text-xs mb-1">Vibe Score</div>
                                            <div className="flex gap-1">
                                                {Array.from({ length: selectedEvent.vibeScore }).map((_, i) => (
                                                    <span key={i} className="text-lg">
                                                        ðŸ”¥
                                                    </span>
                                                ))}
                                            </div>
                                        </div>

                                        <div>
                                            <div className="text-muted text-xs mb-1">Attendees</div>
                                            <div>{selectedEvent.attendees} people</div>
                                        </div>

                                        {selectedEvent.speakers.length > 0 && (
                                            <div>
                                                <div className="text-muted text-xs mb-1">Speakers</div>
                                                <div>{selectedEvent.speakers.join(', ')}</div>
                                            </div>
                                        )}

                                        {selectedEvent.partners.length > 0 && (
                                            <div>
                                                <div className="text-muted text-xs mb-1">Partners</div>
                                                <div>{selectedEvent.partners.join(', ')}</div>
                                            </div>
                                        )}

                                        {selectedEvent.aiSummary && (
                                            <div>
                                                <div className="text-muted text-xs mb-1">AI Summary</div>
                                                <div className="text-sm leading-relaxed">{selectedEvent.aiSummary}</div>
                                            </div>
                                        )}

                                        {selectedEvent.funFact && (
                                            <div>
                                                <div className="text-muted text-xs mb-1">Fun Fact</div>
                                                <div className="text-sm">{selectedEvent.funFact}</div>
                                            </div>
                                        )}

                                        {selectedEvent.chaos && (
                                            <div>
                                                <div className="text-muted text-xs mb-1">Chaos Level</div>
                                                <div className="text-sm">{selectedEvent.chaos}</div>
                                            </div>
                                        )}

                                        {selectedEvent.snackRating && (
                                            <div>
                                                <div className="text-muted text-xs mb-1">Snack Rating</div>
                                                <div className="text-sm">{selectedEvent.snackRating}</div>
                                            </div>
                                        )}

                                        <div>
                                            <a
                                                href={selectedEvent.link}
                                                target="_blank"
                                                rel="noopener noreferrer"
                                                className="text-orange hover:underline text-sm"
                                            >
                                                View details â†’
                                            </a>
                                        </div>
                                    </div>
                                </div>
                            </ScrollArea>
                        </div>
                    )}

                    <div className="absolute bottom-4 right-4 flex flex-col gap-2 z-10">
                        <button
                            onClick={handleZoomIn}
                            className="w-10 h-10 flex items-center justify-center rounded bg-primary border border-primary hover:bg-accent text-primary shadow-lg text-xl font-bold"
                            aria-label="Zoom in"
                        >
                            +
                        </button>
                        <button
                            onClick={handleZoomOut}
                            className="w-10 h-10 flex items-center justify-center rounded bg-primary border border-primary hover:bg-accent text-primary shadow-lg text-xl font-bold"
                            aria-label="Zoom out"
                        >
                            âˆ’
                        </button>
                    </div>

                    <div className="absolute top-0 left-0 w-full h-full bg-accent/10">
                        <Map
                            projection="geoMercator"
                            projectionConfig={{
                                scale: 147,
                            }}
                            style={{ width: '100%', height: '100%' }}
                        >
                            <ZoomGroup
                                center={position.coordinates as [number, number]}
                                zoom={position.zoom}
                                onMoveEnd={handleMoveEnd}
                            >
                                <Geos geography={geoUrl}>
                                    {({ geographies }: any) =>
                                        geographies.map((geo: any) => (
                                            <Geo
                                                key={geo.rsmKey}
                                                geography={geo}
                                                fill="#d1d5db"
                                                stroke="#ffffff"
                                                strokeWidth={0.5}
                                                style={{
                                                    default: { outline: 'none' },
                                                    hover: { outline: 'none', fill: '#9ca3af' },
                                                    pressed: { outline: 'none' },
                                                }}
                                            />
                                        ))
                                    }
                                </Geos>
                                {displayEvents.map((event, idx) => (
                                    <MapMarker
                                        key={idx}
                                        coordinates={[event.location.lng, event.location.lat]}
                                        onClick={() => handleEventClick(event)}
                                        onMouseEnter={() => setHoveredEvent(event)}
                                        onMouseLeave={() => setHoveredEvent(null)}
                                    >
                                        <g>
                                            <circle
                                                r={selectedEvent?.name === event.name ? 8 : 6}
                                                fill="#FF9500"
                                                stroke="#ffffff"
                                                strokeWidth={2}
                                                className="cursor-pointer hover:opacity-80 transition-all"
                                                style={{
                                                    filter:
                                                        selectedEvent?.name === event.name
                                                            ? 'drop-shadow(0 0 8px rgba(255, 149, 0, 0.6))'
                                                            : 'none',
                                                }}
                                            />
                                            {hoveredEvent?.name === event.name && (
                                                <g>
                                                    <rect
                                                        x="10"
                                                        y="-40"
                                                        width="200"
                                                        height="60"
                                                        rx="4"
                                                        fill="#1d1d1d"
                                                        stroke="#ffffff"
                                                        strokeWidth="1"
                                                        opacity="0.95"
                                                    />
                                                    <text
                                                        x="15"
                                                        y="-25"
                                                        fontSize="12"
                                                        fontWeight="bold"
                                                        fill="#ffffff"
                                                        style={{ pointerEvents: 'none' }}
                                                    >
                                                        {event.name.length > 30
                                                            ? event.name.substring(0, 30) + '...'
                                                            : event.name}
                                                    </text>
                                                    <text
                                                        x="15"
                                                        y="-10"
                                                        fontSize="10"
                                                        fill="#cccccc"
                                                        style={{ pointerEvents: 'none' }}
                                                    >
                                                        {event.location.label}
                                                    </text>
                                                    <text
                                                        x="15"
                                                        y="5"
                                                        fontSize="10"
                                                        fill="#cccccc"
                                                        style={{ pointerEvents: 'none' }}
                                                    >
                                                        {new Date(event.date).toLocaleDateString('en-US', {
                                                            month: 'short',
                                                            day: 'numeric',
                                                            year: 'numeric',
                                                        })}
                                                    </text>
                                                </g>
                                            )}
                                        </g>
                                    </MapMarker>
                                ))}
                            </ZoomGroup>
                        </Map>
                    </div>
                </div>
            </div>
        </Explorer>
    )
}

export default Events
