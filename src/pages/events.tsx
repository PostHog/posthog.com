import cntl from 'cntl'
import Layout from 'components/Layout'
import React, { useEffect, useState, useLayoutEffect, useRef } from 'react'
import SEO from 'components/seo'
import Link from 'components/Link'
import Tooltip from 'components/Tooltip'
import Explorer from 'components/Explorer'
import ScrollArea from 'components/RadixUI/ScrollArea'
import { ToggleGroup } from 'components/RadixUI/ToggleGroup'
import * as am5 from '@amcharts/amcharts5'
import * as am5map from '@amcharts/amcharts5/map'
import am5geodata_worldLow from '@amcharts/amcharts5-geodata/worldLow'
import am5geodata_usaLow from '@amcharts/amcharts5-geodata/usaLow'
import am5themes_Animated from '@amcharts/amcharts5/themes/Animated'

type Event = {
    name: string
    location: { label: string; lat: number; lng: number }
    date: string
    format: string[]
    audience: string[]
    attendees: number
    speakers: string[]
    partners: string[]
    vibeScore: number
    link: string
    closed?: boolean
    // Enhanced properties for past events
    starRating?: number
    aiSummary?: string
    imageGallery?: string[]
    chaos?: string
    funFact?: string
    snackRating?: string
}

const eventsData: Event[] = [
    {
        name: 'AGI Builders Meetup with PostHog',
        location: { label: 'San Francisco, CA', lat: 37.7749, lng: -122.4194 },
        date: '2025-07-22',
        format: ['Talks', 'Fireside'],
        audience: ['SF AI Enthusiasts'],
        attendees: 112,
        speakers: ['Peter K', 'James'],
        partners: ['AGI Builders'],
        vibeScore: 5,
        link: 'https://github.com/PostHog/company-internal/issues/1999',
        starRating: 4.8,
        aiSummary:
            "An electrifying evening where 112 AI enthusiasts gathered to discuss the future of AGI. Peter K dropped some seriously hot takes about model interpretability while James casually mentioned he's teaching his toaster to write code. The energy was IMMACULATE.",
        imageGallery: ['agi-1.jpg', 'agi-2.jpg', 'agi-3.jpg'],
        chaos: 'Someone brought a robot arm that kept photobombing the speakers',
        funFact: "17 people claimed they were 'building the next ChatGPT'",
        snackRating: 'Pizza was mid but the AI-generated fortune cookies went HARD 🔥',
    },
    {
        name: 'AI Product Breakfast: AI Decisioning',
        location: { label: 'Austin, TX', lat: 30.2672, lng: -97.7431 },
        date: '2025-08-12',
        format: ['Breakfast', 'OST'],
        audience: ['AI Engineers'],
        attendees: 25,
        speakers: ['Haven'],
        partners: ['AITX'],
        vibeScore: 5,
        link: 'https://github.com/PostHog/meta/issues/334',
        starRating: 4.9,
        aiSummary:
            'Intimate breakfast gathering where Haven absolutely CRUSHED the AI decisioning talk. OST format led to some wild conversations about autonomous agents making life choices for us. Someone suggested an AI to decide what to have for breakfast at a breakfast event. Meta.',
        imageGallery: ['breakfast-1.jpg', 'breakfast-2.jpg'],
        chaos: 'The coffee machine broke and someone joked it was an AI uprising',
        funFact: "Haven's slides were actually generated by an AI that made decisions about what slides to show",
        snackRating: 'Texas-sized breakfast tacos. Absolutely legendary. 11/10',
    },
    {
        name: 'PostHog hardware hacknight',
        location: { label: 'Vermont, USA', lat: 44.5588, lng: -72.5778 },
        date: '2025-09-16',
        format: ['Meetup'],
        audience: ['Engineers', 'Founders'],
        attendees: 19,
        speakers: ['Danilo'],
        partners: [],
        vibeScore: 5,
        link: 'https://github.com/PostHog/meta/issues/322',
        starRating: 5.0,
        aiSummary:
            'Danilo hosted an absolutely UNHINGED hardware hacknight in Vermont. People built physical things with their bare hands. In 2025. Soldering irons were involved. Someone made a hedgehog-shaped robot that tracks analytics. Peak PostHog energy.',
        imageGallery: ['hardware-1.jpg', 'hardware-2.jpg', 'hardware-3.jpg'],
        chaos: 'Multiple smoke alarms triggered. Standard hardware hacknight behavior.',
        funFact: 'The hedgehog robot is now a permanent office fixture and has its own Slack channel',
        snackRating: "Artisanal Vermont cheese and maple everything. Chef's kiss.",
    },
    {
        name: 'MCP Builders Breakfast',
        location: { label: 'Amsterdam, NL', lat: 52.3676, lng: 4.9041 },
        date: '2025-09-25',
        format: ['Breakfast', 'OST'],
        audience: ['MCP practitioners'],
        attendees: 20,
        speakers: ['Jonathan'],
        partners: ['Fiberplane'],
        vibeScore: 5,
        link: 'https://github.com/PostHog/meta/issues/356',
        starRating: 4.7,
        aiSummary:
            'Jonathan brought the MCP heat to Amsterdam. 20 practitioners geeking out about protocols over Dutch breakfast. The OST format meant conversations went DEEP into technical weeds. Beautiful chaos.',
        imageGallery: ['mcp-1.jpg', 'mcp-2.jpg'],
        chaos: 'Someone tried to explain their MCP implementation using only bread and cheese',
        funFact: '3 people arrived on bikes. Very Amsterdam.',
        snackRating: 'Stroopwafels and hagelslag. Dutch breakfast supremacy confirmed.',
    },
    {
        name: "From Open Source to Scale: A Conversation with PostHog's Tim Glaser",
        location: { label: 'Dublin, IE', lat: 53.3498, lng: -6.2603 },
        date: '2025-09-26',
        format: ['Panel'],
        audience: ['Founders'],
        attendees: 55,
        speakers: ['Tim'],
        partners: [],
        vibeScore: 5,
        link: 'https://github.com/PostHog/meta/issues/371',
        starRating: 4.9,
        aiSummary:
            "Tim absolutely crushed it talking about PostHog's journey from scrappy open source project to CRUSHING IT at scale. 55 founders hanging on every word about fundraising, hiring, and why hedgehogs are the superior mascot choice.",
        imageGallery: ['dublin-1.jpg', 'dublin-2.jpg', 'dublin-3.jpg'],
        chaos: 'Someone asked if Tim would accept payment in Guinness',
        funFact: 'Tim revealed he codes in dark mode exclusively. Based.',
        snackRating: 'Irish whiskey and fancy cheese. Solid 9/10.',
    },
    {
        name: 'Paellas and Agents with PostHog',
        location: { label: 'Barcelona, ES', lat: 41.3851, lng: 2.1734 },
        date: '2025-09-28',
        format: ['Workshop'],
        audience: ['AI engineers'],
        attendees: 22,
        speakers: ['Georgiy'],
        partners: [],
        vibeScore: 5,
        link: 'https://github.com/PostHog/meta/issues/333',
        starRating: 4.6,
        aiSummary:
            'Georgiy ran a workshop on AI agents while we literally cooked paella together. Multi-tasking level: LEGENDARY. People were debugging agent hallucinations while stirring saffron rice. This is the future of tech events.',
        imageGallery: ['paella-1.jpg', 'paella-2.jpg'],
        chaos: "Someone's agent accidentally ordered 50kg of rice to the venue",
        funFact: "The paella was actually better than most Barcelona restaurants. Don't @ me.",
        snackRating: 'Fresh paella cooked on-site. Literally perfect. ∞/10',
    },
    {
        name: 'Valio Con',
        location: { label: 'San Diego, CA', lat: 32.7157, lng: -117.1611 },
        date: '2025-09-14',
        format: ['Conf sponsorship'],
        audience: ['Designers'],
        attendees: 65,
        speakers: ['Cory'],
        partners: [],
        vibeScore: 4,
        link: 'https://github.com/PostHog/meta/issues/343',
        starRating: 4.3,
        aiSummary:
            "Cory represented PostHog at Valio Con, spreading the good word about product analytics to 65 designers. Lots of conversations about beautiful dashboards and why comic sans should be a valid font choice (it shouldn't).",
        imageGallery: ['valio-1.jpg', 'valio-2.jpg'],
        chaos: 'Design twitter beef erupted over button radius. Classic.',
        funFact: 'Someone designed a hedgehog logo redesign and it was... interesting',
        snackRating: 'Conference snacks. Standard fare. 6/10',
    },
    {
        name: 'PostHog Founders Lunch',
        location: { label: 'Cardiff, UK', lat: 51.4816, lng: -3.1791 },
        date: '2025-09-23',
        format: ['Lunch', 'OST'],
        audience: ['Founders'],
        attendees: 25,
        speakers: ['Adam'],
        partners: [],
        vibeScore: 4,
        link: 'https://github.com/PostHog/meta/issues/372',
        starRating: 4.5,
        aiSummary:
            "Adam hosted an intimate founders lunch in Cardiff. OST format meant deep conversations about fundraising, pivots, and whether it's ethical to name your company after an animal. Unanimous consensus: yes.",
        imageGallery: ['cardiff-1.jpg'],
        chaos: 'Someone pivoted their startup idea mid-lunch',
        funFact: 'Zero people knew Cardiff was in Wales before this event',
        snackRating: 'Welsh cakes and local lamb. Surprisingly fire. 8/10',
    },
    {
        name: '[Closed Event] James dinner with ODF founders',
        location: { label: 'San Francisco, CA', lat: 37.7749, lng: -122.4194 },
        date: '2025-09-24',
        format: ['Dinner'],
        audience: ['Founders'],
        attendees: 11,
        speakers: ['James'],
        partners: ['ODF'],
        vibeScore: 4,
        link: 'https://posthog.slack.com/archives/C08CG24E3SR/p1758828510754499',
        closed: true,
        starRating: 4.8,
        aiSummary:
            'Exclusive dinner where James and ODF founders discussed [REDACTED]. The vibes were immaculate. The conversation was [REDACTED]. Someone may or may not have [REDACTED].',
        imageGallery: ['redacted.jpg'],
        chaos: '[REDACTED]',
        funFact: "This event is so exclusive we can't tell you the fun fact",
        snackRating: "Michelin-level cuisine. We think. It's classified. ??/10",
    },
    {
        name: 'Jersey City Tech Meetup with PostHog',
        location: { label: 'Jersey City, NJ', lat: 40.7178, lng: -74.0431 },
        date: '2025-09-30',
        format: ['Talks', 'Panel', 'Networking'],
        audience: ['Product managers', 'Engineers'],
        attendees: 70,
        speakers: ['Abe'],
        partners: ['Apprenticeio'],
        vibeScore: 4,
        link: 'https://github.com/PostHog/meta/issues/339',
        starRating: 4.4,
        aiSummary:
            "Abe brought PostHog to Jersey City for talks, panels, and networking. 70 PMs and engineers talking about product development, analytics, and why Jersey gets a bad rap (it doesn't deserve it... mostly).",
        imageGallery: ['jersey-1.jpg', 'jersey-2.jpg'],
        chaos: "Heated debate about whether it's called 'pork roll' or 'taylor ham'",
        funFact: 'Best view of Manhattan skyline from any PostHog event to date',
        snackRating: 'Pizza and bagels. Jersey does food right. 9/10',
    },
    {
        name: 'MCP After Hours: AI Dev Tools Demo Night',
        location: { label: 'San Francisco, CA', lat: 37.7749, lng: -122.4194 },
        date: '2025-07-10',
        format: ['Talks'],
        audience: ['Founders', 'Engineers'],
        attendees: 85,
        speakers: ['Peter K'],
        partners: ['Speakeasy'],
        vibeScore: 3,
        link: 'https://github.com/PostHog/meta/issues/325',
        starRating: 4.1,
        aiSummary:
            'Peter K hosted demo night for AI dev tools. 85 people watching live demos of tools that may or may not ship. Classic startup energy. Someone demoed a tool that writes demos for demo nights. Peak meta.',
        imageGallery: ['demo-1.jpg', 'demo-2.jpg'],
        chaos: 'Three demos crashed during the actual demo',
        funFact: "Someone's 'AI pair programmer' suggested replacing their entire codebase with PHP",
        snackRating: 'Standard tech event pizza and beer. Mid. 5/10',
    },
    {
        name: 'Building With and For AI: Developer Tools for Modern Apps',
        location: { label: 'New York, NY', lat: 40.7128, lng: -74.006 },
        date: '2025-08-21',
        format: ['Talks', 'Networking'],
        audience: ['Engineers', 'Engineering managers'],
        attendees: 50,
        speakers: ['Abe'],
        partners: ['Vercel', 'Profound'],
        vibeScore: 3,
        link: 'https://github.com/PostHog/meta/issues/342',
        starRating: 4.2,
        aiSummary:
            "Abe teamed up with Vercel and Profound for a deep dive into AI dev tools. 50 engineers and managers discussing the bleeding edge of AI tooling. Someone asked when we'll have AI that writes the AI that writes the code. Soon™.",
        imageGallery: ['nyc-1.jpg'],
        chaos: 'Networking session turned into impromptu recruitment fair',
        funFact:
            'Someone was taking notes using an AI scribe that was running on a framework that was demoed at the event',
        snackRating: 'NYC bagels and coffee. Proper. 8/10',
    },
    {
        name: 'The Future of Developer Experience: Toronto Edition',
        location: { label: 'Toronto, ON', lat: 43.6532, lng: -79.3832 },
        date: '2025-08-26',
        format: ['Talks', 'Networking'],
        audience: ['Startup founders'],
        attendees: 75,
        speakers: ['Vincent'],
        partners: ['Deskree'],
        vibeScore: 3,
        link: 'https://github.com/PostHog/meta/issues/347',
        starRating: 4.0,
        aiSummary:
            "Vincent brought the DX conversation to Toronto. 75 founders debating what makes a good developer experience. Spoiler: it's good docs, fast builds, and tools that don't make you want to flip your desk.",
        imageGallery: ['toronto-1.jpg', 'toronto-2.jpg'],
        chaos: "Someone's laptop died during their talk about reliable infrastructure",
        funFact: 'Everyone apologized at least once. Very Canadian.',
        snackRating: 'Poutine and Tim Hortons. When in Rome. 7/10',
    },
    {
        name: 'Stealth Mode Mornings with PostHog',
        location: { label: 'New York, NY', lat: 40.7128, lng: -74.006 },
        date: '2025-07-24',
        format: ['Breakfast'],
        audience: ['Stealth founders'],
        attendees: 7,
        speakers: ['Mine'],
        partners: ['Starcycle', 'Cooley'],
        vibeScore: 2,
        link: 'https://github.com/PostHog/meta/issues/330',
        starRating: 3.8,
        aiSummary:
            "Intimate breakfast with 7 stealth founders. Everyone signed NDAs. We still don't know what anyone is building. Could be the next big thing. Could be another food delivery app. The mystery continues.",
        imageGallery: ['stealth-1.jpg'],
        chaos: 'Someone accidentally almost revealed their stealth startup and everyone gasped',
        funFact: 'This event was so stealth we almost forgot to have it',
        snackRating: 'Fancy breakfast but portions were TINY. 4/10',
    },
    {
        name: 'Pubquiz at Flutter & friends',
        location: { label: 'Stockholm, SE', lat: 59.3293, lng: 18.0686 },
        date: '2025-08-31',
        format: ['Pub quiz'],
        audience: ['Flutter engineers'],
        attendees: 50,
        speakers: ['Manoel'],
        partners: [],
        vibeScore: 2,
        link: 'https://github.com/PostHog/meta/issues/358',
        starRating: 3.9,
        aiSummary:
            "Manoel hosted a pub quiz at Flutter & friends conference. 50 Flutter engineers proving they're better at writing Dart than answering trivia. Lots of debate about whether Flutter counts as 'real' native development. (It does.)",
        imageGallery: ['pubquiz-1.jpg'],
        chaos: 'Quiz master asked a question about SwiftUI and got booed',
        funFact: "Winning team's name was 'Widget Tree Huggers'",
        snackRating: 'Swedish pub food and beer. Solid. 7/10',
    },
    {
        name: "München Hogtoberfest '25",
        location: { label: 'Munich, DE', lat: 48.1351, lng: 11.582 },
        date: '2025-09-24',
        format: ['Drinks'],
        audience: ['Founders', 'Engineers'],
        attendees: 7,
        speakers: [],
        partners: ['Speedinvest'],
        vibeScore: 2,
        link: 'https://github.com/PostHog/meta/issues/361',
        starRating: 4.2,
        aiSummary:
            'Small but mighty gathering in Munich. 7 people, infinite beer, and discussions about European startup ecosystems. Speedinvest brought the VC perspective. Everyone wore lederhosen. (Just kidding. Nobody wore lederhosen.)',
        imageGallery: ['munich-1.jpg'],
        chaos: 'Someone tried to expense their Oktoberfest outfit',
        funFact: 'Smallest PostHog event by attendance, highest beer-to-person ratio',
        snackRating: 'German pretzels and beer. Legendary. 10/10',
    },
]

function Events() {
    const [activeTab, setActiveTab] = useState<'past' | 'upcoming'>('past')
    const [selectedEvent, setSelectedEvent] = useState<Event | null>(null)
    const [hoveredEvent, setHoveredEvent] = useState<Event | null>(null)
    const chartRef = useRef<HTMLDivElement>(null)
    const chartInstanceRef = useRef<am5map.MapChart | null>(null)
    const pointSeriesRef = useRef<am5map.ClusteredPointSeries | null>(null)

    const today = new Date()
    const pastEvents = eventsData
        .filter((event) => new Date(event.date) < today)
        .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())

    const upcomingEvents = eventsData
        .filter((event) => new Date(event.date) >= today)
        .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime())

    const displayEvents = activeTab === 'past' ? pastEvents : upcomingEvents

    const handleEventClick = (event: Event) => {
        setSelectedEvent(event)
        // Hide tooltip and zoom to the event location with animation (deeper zoom for active state)
        if (chartInstanceRef.current && pointSeriesRef.current) {
            pointSeriesRef.current.hideTooltip()

            // Calculate longitude offset to account for detail panel (384px wide)
            // At zoom level 8, roughly 1 degree = 100px, so offset by ~4 degrees to the right
            const zoomLevel = 10
            const longitudeOffset = -6 // Shift the map center to the right

            chartInstanceRef.current.zoomToGeoPoint(
                {
                    latitude: event.location.lat,
                    longitude: event.location.lng + longitudeOffset,
                },
                zoomLevel,
                true
            )
        }
    }

    // Handle ESC key to close detail panel
    useEffect(() => {
        const handleKeyDown = (e: KeyboardEvent) => {
            if (e.key === 'Escape' && selectedEvent) {
                setSelectedEvent(null)
            }
        }

        window.addEventListener('keydown', handleKeyDown)
        return () => window.removeEventListener('keydown', handleKeyDown)
    }, [selectedEvent])

    // Initialize the map
    useLayoutEffect(() => {
        if (!chartRef.current) return

        am5.addLicense('AM5M-1930-8548-3690-4255')

        const root = am5.Root.new(chartRef.current)
        root.setThemes([am5themes_Animated.new(root)])

        const chart = root.container.children.push(
            am5map.MapChart.new(root, {
                projection: am5map.geoMercator(),
                panX: 'translateX',
                panY: 'translateY',
                wheelY: 'zoom',
                maxZoomLevel: 10,
                minZoomLevel: 1,
            })
        )

        chartInstanceRef.current = chart

        // Add zoom control
        const zoomControl = am5map.ZoomControl.new(root, {})
        chart.set('zoomControl', zoomControl)
        zoomControl.homeButton.set('visible', true)

        // Add polygon series (countries)
        const polygonSeries = chart.series.push(
            am5map.MapPolygonSeries.new(root, {
                geoJSON: am5geodata_worldLow,
                exclude: ['AQ'], // Antarctica
            })
        )

        polygonSeries.mapPolygons.template.setAll({
            fill: am5.color(0xd1d5db),
            fillOpacity: 1,
            stroke: am5.color(0xffffff),
            strokeWidth: 0.5,
            interactive: false,
        })

        polygonSeries.mapPolygons.template.states.create('hover', {
            fill: am5.color(0x9ca3af),
        })

        // Add US states and Canadian provinces layer (shown when zoomed in)
        // We'll create this as a separate series that sits on top of the base map
        const subRegionSeries = chart.series.push(
            am5map.MapPolygonSeries.new(root, {
                geoJSON: am5geodata_usaLow,
            })
        )

        subRegionSeries.mapPolygons.template.setAll({
            fill: am5.color(0xd1d5db),
            fillOpacity: 0, // Transparent fill, only borders visible
            stroke: am5.color(0x666666),
            strokeWidth: 1,
            strokeOpacity: 0, // Start hidden, will be shown via animation
            interactive: false,
        })

        // Wait for the series data to be loaded before setting up zoom handlers
        subRegionSeries.events.once('datavalidated', () => {
            console.log('🗺️ Sub-region series loaded with', subRegionSeries.mapPolygons.length, 'polygons')

            // Now set up zoom handler
            const updateBordersAndStates = () => {
                const zoomLevel = chart.get('zoomLevel', 1)
                console.log('🔍 Zoom level:', zoomLevel)

                // Update country borders
                if (zoomLevel > 2) {
                    polygonSeries.mapPolygons.template.setAll({
                        strokeWidth: 1.5,
                        strokeOpacity: 0.8,
                    })
                } else {
                    polygonSeries.mapPolygons.template.setAll({
                        strokeWidth: 0.5,
                        strokeOpacity: 1,
                    })
                }

                // Show/hide state/province borders based on zoom
                const targetOpacity = zoomLevel > 3 ? 0.5 : 0
                console.log('🗺️ Setting sub-region strokeOpacity to:', targetOpacity)

                subRegionSeries.mapPolygons.each((polygon) => {
                    polygon.animate({
                        key: 'strokeOpacity',
                        to: targetOpacity,
                        duration: 300,
                        easing: am5.ease.out(am5.ease.cubic),
                    })
                })
            }

            // Attach zoom handlers
            ;(chart.events as any).on('wheelended', updateBordersAndStates)
            ;(chart.events as any).on('panended', updateBordersAndStates)
            ;(chart.events as any).on('zoomended', updateBordersAndStates)

            // Run once to set initial state
            updateBordersAndStates()
        })

        // Add point series (event markers) with clustering
        const pointSeries = chart.series.push(
            am5map.ClusteredPointSeries.new(root, {
                minDistance: 30, // Minimum distance between markers before clustering
            })
        )
        pointSeriesRef.current = pointSeries

        // Individual marker bullet
        pointSeries.bullets.push((root, _series, dataItem) => {
            const container = am5.Container.new(root, {})
            const eventData = dataItem.dataContext as any
            const isSelected = eventData?.isSelected
            const isHovered = eventData?.isHovered

            const circle = container.children.push(
                am5.Circle.new(root, {
                    radius: 8,
                    fill: isSelected
                        ? am5.color(0x2f80fa) // Blue when selected (active)
                        : isHovered
                        ? am5.color(0xff6a00) // Darker orange when hovered
                        : am5.color(0xff9500), // Normal orange
                    stroke: isHovered ? am5.color(0x000000) : am5.color(0xffffff), // Black outline when hovered
                    strokeWidth: isSelected ? 3 : 2,
                    tooltipText: '{name}\n{location}\n{date}',
                    cursorOverStyle: 'pointer',
                    scale: 1,
                    centerX: am5.p50,
                    centerY: am5.p50,
                })
            )

            circle.states.create('hover', {
                scale: 1.3,
            })

            // Handle clicks on the circle
            circle.events.on('click', () => {
                const event = eventData.eventData as Event
                if (event) {
                    pointSeries.hideTooltip()
                    handleEventClick(event)
                }
            })

            // Adjust marker size to remain constant at different zoom levels
            ;(chart.events as any).on('wheelended', () => {
                const zoomLevel = chart.get('zoomLevel', 1)
                const baseScale = 1 / Math.sqrt(zoomLevel)
                circle.set('scale', Math.max(baseScale, 0.6))
            })

            return am5.Bullet.new(root, {
                sprite: container,
            })
        })

        // Cluster bullet
        pointSeries.set('clusteredBullet', (root, _series, dataItem) => {
            const container = am5.Container.new(root, {
                cursorOverStyle: 'pointer',
            })

            const circle = container.children.push(
                am5.Circle.new(root, {
                    radius: 12,
                    tooltipText: '{value} events',
                    fill: am5.color(0xff9500),
                    stroke: am5.color(0xffffff),
                    strokeWidth: 2,
                })
            )

            // Use adapter to dynamically check if cluster contains hovered event
            circle.adapters.add('fill', () => {
                // Try multiple ways to access cluster children
                const bullets = (dataItem as any).bullets
                const points = (dataItem as any).points
                const children = bullets || points

                if (children && Array.isArray(children)) {
                    for (const child of children) {
                        // Try different ways to access the data
                        const childData = child.dataItem?.dataContext || child.dataContext
                        if (childData?.isHovered) {
                            return am5.color(0xff6a00) // Darker orange if contains hovered event
                        }
                    }
                }

                // Also check series data directly by matching coordinates
                const lat = dataItem.get('latitude')
                const lng = dataItem.get('longitude')
                if (lat && lng && _series.data.length > 0) {
                    for (const point of _series.data.values) {
                        const pointData = point as any
                        if (pointData.geometry?.coordinates) {
                            const [pLng, pLat] = pointData.geometry.coordinates
                            // Check if coordinates are very close (within cluster range)
                            if (Math.abs(pLat - lat) < 0.01 && Math.abs(pLng - lng) < 0.01) {
                                if (pointData.isHovered) {
                                    return am5.color(0xff6a00)
                                }
                            }
                        }
                    }
                }

                return am5.color(0xff9500) // Normal orange
            })

            circle.adapters.add('strokeWidth', () => {
                const bullets = (dataItem as any).bullets
                const points = (dataItem as any).points
                const children = bullets || points

                if (children && Array.isArray(children)) {
                    for (const child of children) {
                        const childData = child.dataItem?.dataContext || child.dataContext
                        if (childData?.isHovered) {
                            return 3
                        }
                    }
                }

                // Check series data directly
                const lat = dataItem.get('latitude')
                const lng = dataItem.get('longitude')
                if (lat && lng && _series.data.length > 0) {
                    for (const point of _series.data.values) {
                        const pointData = point as any
                        if (pointData.geometry?.coordinates) {
                            const [pLng, pLat] = pointData.geometry.coordinates
                            if (Math.abs(pLat - lat) < 0.01 && Math.abs(pLng - lng) < 0.01) {
                                if (pointData.isHovered) {
                                    return 3
                                }
                            }
                        }
                    }
                }

                return 2
            })

            circle.adapters.add('stroke', () => {
                const bullets = (dataItem as any).bullets
                const points = (dataItem as any).points
                const children = bullets || points

                if (children && Array.isArray(children)) {
                    for (const child of children) {
                        const childData = child.dataItem?.dataContext || child.dataContext
                        if (childData?.isHovered) {
                            return am5.color(0x000000) // Black border when hovered
                        }
                    }
                }

                // Check series data directly
                const lat = dataItem.get('latitude')
                const lng = dataItem.get('longitude')
                if (lat && lng && _series.data.length > 0) {
                    for (const point of _series.data.values) {
                        const pointData = point as any
                        if (pointData.geometry?.coordinates) {
                            const [pLng, pLat] = pointData.geometry.coordinates
                            if (Math.abs(pLat - lat) < 0.01 && Math.abs(pLng - lng) < 0.01) {
                                if (pointData.isHovered) {
                                    return am5.color(0x000000) // Black border when hovered
                                }
                            }
                        }
                    }
                }

                return am5.color(0xffffff) // White border normally
            })

            container.children.push(
                am5.Label.new(root, {
                    centerX: am5.p50,
                    centerY: am5.p50,
                    fill: am5.color(0xffffff),
                    fontSize: 11,
                    fontWeight: 'bold',
                    populateText: true,
                    text: '{value}',
                })
            )

            // Handle click to zoom in on cluster
            circle.events.on('click', () => {
                pointSeries.hideTooltip()
                if (dataItem && chartInstanceRef.current) {
                    const lat = dataItem.get('latitude') as number
                    const lng = dataItem.get('longitude') as number
                    const currentZoom = chartInstanceRef.current.get('zoomLevel', 1)
                    // Zoom in more aggressively to break up clusters
                    const newZoom = Math.min(currentZoom * 3.5, 10)
                    chartInstanceRef.current.zoomToGeoPoint({ latitude: lat, longitude: lng }, newZoom, true)
                }
            })

            return am5.Bullet.new(root, {
                sprite: container,
            })
        })

        // Configure tooltip with no animations or fades
        const tooltip = am5.Tooltip.new(root, {
            getFillFromSprite: false,
            getStrokeFromSprite: false,
            autoTextColor: false,
            paddingTop: 8,
            paddingBottom: 8,
            paddingLeft: 12,
            paddingRight: 12,
            animationDuration: 0,
        })

        tooltip.get('background')?.setAll({
            fill: am5.color(0x1d1d1d),
            fillOpacity: 1,
            stroke: am5.color(0xffffff),
            strokeWidth: 1,
        })

        tooltip.label.setAll({
            fill: am5.color(0xffffff),
            fontSize: 12,
        })

        // Completely disable all animations on show and hide
        tooltip.show(0)
        tooltip.hide(0)

        // Set animation properties to 0
        tooltip.set('animationDuration', 0)
        tooltip.set('animationEasing', am5.ease.linear)

        // Disable fade animations on the background
        const tooltipBg = tooltip.get('background')
        if (tooltipBg) {
            tooltipBg.set('opacity', 1)
            tooltipBg.states.create('default', { opacity: 1 })
            tooltipBg.states.create('hidden', { opacity: 1 })
        }

        pointSeries.set('tooltip', tooltip)

        // Hide tooltip when zoom/pan starts
        ;(chart.events as any).on('wheelstarted', () => {
            pointSeries.hideTooltip()
        })
        ;(chart.events as any).on('panstarted', () => {
            pointSeries.hideTooltip()
        })

        return () => {
            root.dispose()
        }
    }, [])

    // Update map data when displayEvents, selectedEvent, or hoveredEvent changes
    useEffect(() => {
        if (!pointSeriesRef.current || !chartInstanceRef.current) return

        const pointsData = displayEvents.map((event) => ({
            geometry: { type: 'Point', coordinates: [event.location.lng, event.location.lat] },
            name: event.name,
            location: event.location.label,
            date: new Date(event.date).toLocaleDateString('en-US', {
                month: 'short',
                day: 'numeric',
                year: 'numeric',
            }),
            eventData: event,
            isSelected: selectedEvent?.name === event.name,
            isHovered: hoveredEvent?.name === event.name,
        }))

        pointSeriesRef.current.data.setAll(pointsData)

        // Force refresh of bullets to update cluster colors based on hover state
        pointSeriesRef.current.markDirty()
    }, [displayEvents, selectedEvent, hoveredEvent])

    // Center map on events when switching tabs or first load (separate effect to avoid zoom on hover)
    useEffect(() => {
        if (!chartInstanceRef.current) return
        if (selectedEvent || displayEvents.length === 0) return

        // Small delay to ensure data is rendered
        setTimeout(() => {
            if (!chartInstanceRef.current) return

            // Calculate bounds of all events
            const lats = displayEvents.map((e) => e.location.lat)
            const lngs = displayEvents.map((e) => e.location.lng)
            const minLat = Math.min(...lats)
            const maxLat = Math.max(...lats)
            const minLng = Math.min(...lngs)
            const maxLng = Math.max(...lngs)

            // Calculate center point
            const centerLat = (minLat + maxLat) / 2
            const centerLng = (minLng + maxLng) / 2

            // Calculate span in degrees
            const latSpan = maxLat - minLat
            const lngSpan = maxLng - minLng
            const maxSpan = Math.max(latSpan, lngSpan)

            // Calculate appropriate zoom level (empirical formula)
            // Zoom level roughly corresponds to how many degrees are visible
            // Lower span = higher zoom needed
            let zoomLevel = 1.5
            if (maxSpan < 5) zoomLevel = 5
            else if (maxSpan < 10) zoomLevel = 4
            else if (maxSpan < 20) zoomLevel = 3
            else if (maxSpan < 40) zoomLevel = 2.5
            else if (maxSpan < 80) zoomLevel = 2

            chartInstanceRef.current.zoomToGeoPoint({ latitude: centerLat, longitude: centerLng }, zoomLevel, true)
        }, 100)
    }, [displayEvents, selectedEvent])

    // Zoom back to show all events when closing detail pane
    useEffect(() => {
        if (!selectedEvent && chartInstanceRef.current && displayEvents.length > 0) {
            // Calculate bounds of all events
            const lats = displayEvents.map((e) => e.location.lat)
            const lngs = displayEvents.map((e) => e.location.lng)
            const minLat = Math.min(...lats)
            const maxLat = Math.max(...lats)
            const minLng = Math.min(...lngs)
            const maxLng = Math.max(...lngs)

            // Calculate center point
            const centerLat = (minLat + maxLat) / 2
            const centerLng = (minLng + maxLng) / 2

            // Calculate span in degrees
            const latSpan = maxLat - minLat
            const lngSpan = maxLng - minLng
            const maxSpan = Math.max(latSpan, lngSpan)

            // Calculate appropriate zoom level
            let zoomLevel = 1.5
            if (maxSpan < 5) zoomLevel = 5
            else if (maxSpan < 10) zoomLevel = 4
            else if (maxSpan < 20) zoomLevel = 3
            else if (maxSpan < 40) zoomLevel = 2.5
            else if (maxSpan < 80) zoomLevel = 2

            chartInstanceRef.current.zoomToGeoPoint({ latitude: centerLat, longitude: centerLng }, zoomLevel, true)
        }
    }, [selectedEvent, displayEvents])

    return (
        <Explorer template="generic" slug="events" title="Cool tech events" fullScreen>
            <div data-scheme="primary" className="flex flex-col @lg:flex-row text-primary h-full">
                <aside
                    data-scheme="secondary"
                    className="@lg:basis-80 bg-primary border-t @md:border-t-0 @md:border-r border-primary h-full flex flex-col"
                >
                    <div className="border-b border-primary px-4 pt-4 pb-4">
                        <ToggleGroup
                            title=""
                            hideTitle
                            options={[
                                { label: `Upcoming (${upcomingEvents.length})`, value: 'upcoming' },
                                { label: `Past (${pastEvents.length})`, value: 'past' },
                            ]}
                            onValueChange={(value) => setActiveTab(value as 'past' | 'upcoming')}
                            value={activeTab}
                        />
                    </div>

                    <ScrollArea className="flex-1">
                        <div className="p-4">
                            <div className="space-y-3">
                                {displayEvents.map((event, idx) => (
                                    <button
                                        data-scheme="primary"
                                        key={idx}
                                        onClick={() => handleEventClick(event)}
                                        onMouseEnter={() => setHoveredEvent(event)}
                                        onMouseLeave={() => setHoveredEvent(null)}
                                        className={cntl`
                      w-full text-left p-3 rounded border transition-all bg-primary
                      ${
                          selectedEvent?.name === event.name
                              ? 'border-primary outline outline-orange outline-2 outline-offset-1'
                              : 'border-primary'
                      }
                    `}
                                    >
                                        <div className="font-semibold text-sm mb-1 line-clamp-2">{event.name}</div>
                                        <div className="text-xs text-muted space-y-1">
                                            <div>{event.location.label}</div>
                                            <div>
                                                {new Date(event.date).toLocaleDateString('en-US', {
                                                    month: 'short',
                                                    day: 'numeric',
                                                    year: 'numeric',
                                                })}
                                            </div>
                                            <div className="flex items-center gap-1">
                                                {Array.from({ length: event.vibeScore }).map((_, i) => (
                                                    <span key={i}>🔥</span>
                                                ))}
                                            </div>
                                            {event.starRating && (
                                                <div className="flex items-center gap-1">
                                                    <span className="text-orange">★</span>
                                                    <span>{event.starRating.toFixed(1)}</span>
                                                </div>
                                            )}
                                        </div>
                                    </button>
                                ))}
                            </div>
                        </div>
                    </ScrollArea>
                </aside>

                <div className="flex-1 relative h-full">
                    {selectedEvent && (
                        <div className="absolute left-4 top-4 bottom-4 w-96 rounded bg-primary border border-primary shadow-lg z-10 overflow-hidden flex flex-col">
                            <button
                                onClick={() => setSelectedEvent(null)}
                                className="absolute top-2 right-2 z-20 w-8 h-8 flex items-center justify-center rounded hover:bg-accent text-primary hover:text-primary text-xl leading-none"
                            >
                                ✕
                            </button>

                            <ScrollArea className="flex-1">
                                <div className="p-4">
                                    <h2 className="text-xl font-bold mb-2 pr-12">{selectedEvent.name}</h2>

                                    <div className="space-y-3 text-sm mb-4">
                                        <div>
                                            <div className="text-muted text-xs mb-1">Location</div>
                                            <div>{selectedEvent.location.label}</div>
                                        </div>

                                        <div>
                                            <div className="text-muted text-xs mb-1">Date</div>
                                            <div>
                                                {new Date(selectedEvent.date).toLocaleDateString('en-US', {
                                                    month: 'long',
                                                    day: 'numeric',
                                                    year: 'numeric',
                                                })}
                                            </div>
                                        </div>

                                        {selectedEvent.starRating && (
                                            <div>
                                                <div className="text-muted text-xs mb-1">Rating</div>
                                                <div className="flex items-center gap-2">
                                                    <span className="text-orange text-lg">★</span>
                                                    <span className="text-lg font-semibold">
                                                        {selectedEvent.starRating.toFixed(1)}
                                                    </span>
                                                    <span className="text-muted">/ 5.0</span>
                                                </div>
                                            </div>
                                        )}

                                        <div>
                                            <div className="text-muted text-xs mb-1">Format</div>
                                            <div className="flex flex-wrap gap-1">
                                                {selectedEvent.format.map((f, i) => (
                                                    <span key={i} className="px-2 py-1 bg-accent rounded text-xs">
                                                        {f}
                                                    </span>
                                                ))}
                                            </div>
                                        </div>

                                        <div>
                                            <div className="text-muted text-xs mb-1">Vibe Score</div>
                                            <div className="flex gap-1">
                                                {Array.from({ length: selectedEvent.vibeScore }).map((_, i) => (
                                                    <span key={i} className="text-lg">
                                                        🔥
                                                    </span>
                                                ))}
                                            </div>
                                        </div>

                                        <div>
                                            <div className="text-muted text-xs mb-1">Attendees</div>
                                            <div>{selectedEvent.attendees} people</div>
                                        </div>

                                        {selectedEvent.speakers.length > 0 && (
                                            <div>
                                                <div className="text-muted text-xs mb-1">Speakers</div>
                                                <div>{selectedEvent.speakers.join(', ')}</div>
                                            </div>
                                        )}

                                        {selectedEvent.partners.length > 0 && (
                                            <div>
                                                <div className="text-muted text-xs mb-1">Partners</div>
                                                <div>{selectedEvent.partners.join(', ')}</div>
                                            </div>
                                        )}

                                        {selectedEvent.aiSummary && (
                                            <div>
                                                <div className="text-muted text-xs mb-1">AI Summary</div>
                                                <div className="text-sm leading-relaxed">{selectedEvent.aiSummary}</div>
                                            </div>
                                        )}

                                        {selectedEvent.funFact && (
                                            <div>
                                                <div className="text-muted text-xs mb-1">Fun Fact</div>
                                                <div className="text-sm">{selectedEvent.funFact}</div>
                                            </div>
                                        )}

                                        {selectedEvent.chaos && (
                                            <div>
                                                <div className="text-muted text-xs mb-1">Chaos Level</div>
                                                <div className="text-sm">{selectedEvent.chaos}</div>
                                            </div>
                                        )}

                                        {selectedEvent.snackRating && (
                                            <div>
                                                <div className="text-muted text-xs mb-1">Snack Rating</div>
                                                <div className="text-sm">{selectedEvent.snackRating}</div>
                                            </div>
                                        )}

                                        <div>
                                            <a
                                                href={selectedEvent.link}
                                                target="_blank"
                                                rel="noopener noreferrer"
                                                className="text-orange hover:underline text-sm"
                                            >
                                                View details →
                                            </a>
                                        </div>
                                    </div>
                                </div>
                            </ScrollArea>
                        </div>
                    )}

                    <div ref={chartRef} className="absolute top-0 left-0 w-full h-full" />
                </div>
            </div>
        </Explorer>
    )
}

export default Events
